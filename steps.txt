1. Configurer les routes

  Deux fichiers : config > routes
                  controllers > pages_controller
                  (généré à la creation avec template wagon gère les pages statiques)

  terminal : rails routes pour lister les routes éxistantes
  dans fichier routes : root to: 'pages#home' set up la home
  et get "/team" => "pages#team" pour des pages.
  Il faut ensuite implémenter ces actions dans pages_controller.rb
  eg :
    get "/contact" => "pages#join_us" =
    def join_us
      render plain: "Welcome!"
    end

Pour créer nouveau controller : rails g controller Products

2. Render des templates html au lieu de plain text

convention action/vue = une action dans un controller va
generer un template dans un dossier qui a meme nom que
controller dans une page qui a même nom que l'action
(eg PagesController > dossier pages def home > page home.html.erb)

ERB : Embeded Ruby (des pages html dans lesquelles on peut injecter du ruby
avec <%= ruby %> )
eg ('   <p>
    We have <strong><%= 2 +2 %></strong> new products today
  </p> ' = We have 4 new products) >> bad practice
  good practice > render que des variables dans html.
  eg je déclare ma variable @today (variable d'instance et non locale) = Date.today dans pages_controller action home
  Je rendre <%= @today %> dans HTML

3. Transmettre des params dans http (cf ce qu'on pouvait pas faire sur hd)

Plusieurs façons de passer un param :

1. Dans une url dynamique (ex sur facebook username)
2. Query string : ( =? paramas dans url style search airbnb)
3. POST ça passe dans le corps de la requete

Rails ne fait pas la diff car il passe dans tout un hash de param ruby

4. Active record

La table au pluriel est reliée au modele singl.
Pour generer un model : rails g model Product name:string url:string

Un model va générer deux fichiers :

  un modele
  un fichier de migration qui si lancé créera la table en base
  using rails db migrate

  playground active record(methodes):
    1. rails console pour tester des chose
    2. Product.all = SELECT * FROM products
    3. créer : kudoz = Product.new(name: "kudoz", url: "getkudoz.com")
        kudoz.save (INSERT INTO products (name, url) VALUES ('kudoz', 'getkudoz.com'))
        >> en une ligne : Product.create(name: 'hubum', url: 'http://ubum.com')
    4. trouver : Product.find(1)
          SELECT * FROM products WHERE id = 1
    5. Trouver par nom : Product.find_by_name('kudoz')
        Product.find(1)
          SELECT * FROM products WHERE name = 'kudoz'

en pratique : création d'un model (dossier models) basé sur schema de la bdd

    >> rails generate model Product name:string url:string (maj singuilier) va generer migration + model (migrate)
      2. >> rails db:migrate
      NOM MODELE EN CamelCase maj
Voir 17:00 si bloqué

Ajouter une colonne dans notre table produit (tagline):

  rails g migration AddTagLineToProducts tagline:string (CamelCase maj)
  migration added to migrate : srails db:migrate

Validations Active Record (voir model product.rb permet d'écrire en base des données clean eviter doublons etc)

5. CRUD

Create Read Update Delete

  1. start avec routes.rb pour add urls de CRUD ou resource
  2. Créer les actions dans controller

HELPERS

quand rails routes on voit préfixes à gauche ils permettent de générer les urls sans taper en dur

ex : <p>
  <%= link_to "Revenir à l'accueil", root_path, class="btn btn-primary" %>
</p>

6. Actions new et create

Creation d'une page pour créer un pdt (avec un form)
Par défault rails attribue un token à un form post pour éviter accès exterieur
on le désactive dans application_controller pour test

creation du form html

<!--     <form action="/products" method="post">

        <div class="form-group">
          <label for="name">Choisissez un nom de produit</label>
          <input type="text" name="product[name]" placeholder="Kudoz" class="form-control" id="name">
        </div>

        <div class="form-group">
          <label for="url">URL du site web</label>
          <input type="text" name="product[url]" placeholder="http://ku.doz/" class="form-control" id="url">
        </div>

        <input type="submit" value="Ajouter" class="btn btn-primary">

      </form> -->
qu'on remplace par code form ruby en utilisant simple_form
note : .pry pour faire des points d'arrêts pour debug

utiliser config > seeds pour clean le pdt


7. REFACTO

1. product_controller:
creer un "filtre" (before_action) "find_product" only sur les actions ciblés
Implementer la méthode en private à la fin "def find_product" du code qu'on repetait

2. Views
Création d'une partielle _form.html
<%= render "form" %> ou il y a besoin du form

8. Front end

Layout > Utilisation des components du wagon

Après avoir créer div > on crée une partielle scss _banner qu'on import dans _index

Navbar à placer dans le layout views > layout > app car dispo dans tout le site.
Best practice >> création d'un dossier shared pour faire une partielle pour navbar à injecter dans layout.
>> <%= render "shared/navbar" %>
CSS > component du layout donc dossier layout

9 Recap new feature (category)
  1. BDD
    1. BDD schema update (best practice créer un table category et add cat id à products)
    2. rails g migration AddCategoryToProducts category:string
    3. rails db:migrate

  2. Model
    1. validation inclusion :
        validates :category, inclusion: { in: %w(tech education design),
        message: "%{value} is not a valid category" }

  3. Routing > OK

  4. Controller > ok for now

  5. Form
    type collection pour laisser le choix prompt au lieu de label
        <%= f.input :category, collection: ["tech", "education", "design"], prompt: "Which category?" %>

  6. Controler
    Ajouter champs category dans les permissions

  7. Views
    update show.html.erb avec un span pour injecter cat
    update home avec filtres :
      Ajout des blocks
      Design des cards dans _card_category.scss et @import dans _index.scss

  8. Controler
    add un if dans def index pour display que pdts de cat

(version wagon :
<ol>
  <li>D’abord la <strong>DB</strong> : cette user story necessite-t-elle de changer le schéma de notre DB sur <a href="http://db.lewagon.org">http://db.lewagon.org</a>.</li>
  <li>Ensuite le <strong>modèle</strong> : faut-il générer un nouveau modèle (et donc une nouvelle table) ou alors juste une migration pour modifier une table existante ?</li>
  <li>Ensuite le <strong>routing</strong> : faut-il de nouvelles routes ?</li>
  <li>Ensuite le <strong>controlleur</strong> : que doit-on modifier dans les actions du controlleur ? Y-a-t-il de nouveaux <em>strong params</em> à autoriser ?</li>
  <li>Enfin les <strong>vues</strong> : quelle informations dois-je ajouter à mes vues (nouvelles données, nouvelles navigations, nouveau boutons, etc..)</li>
</ol>
)

10. HEROKU
  1. Creation compte
  2. DL via terminal
  3. heroku login
  4. heroku create --region=eu kyol-hunt
  5. deploy : git remote -v pour voir les remote
  6. git push heroku master

  Logs sur heroku avec heroku logs et si erreur heroku run rails db:migrate

  A SAVOIR :
    git push heroku master après un commit
    heroku run rails db:migrate à enchainer si des modifs en base sinon heroku restart needed

  lancer console sur heroku :
    heroku run rails c

11. Users

  1. Instal devise gem (bundle instal après avoir add au fichier)
  2. rails generate devise:install
  3. dans devise.rb config dispos notamment pour pw
  4. placer da,s layout:
    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>
  5. créer model user > rails generate devise User > rails db:migrate
  6. users/sign_in & users/sign_up accessibles
  7. update de la partielle navbar
  8. if sur les alertes sur la home
  9. clean des designs alertes
  10. creation partial (flash) pour les alertes
  11. clean design des vues signin signup
  12. rails generate devise:views > views > devise
  13. limiter accès des user non co > application controler

12. link product to user
  1. rails g migration AddUserToProducts user:references
  2. rails db:migrate
  3. models > product.rb > belongs_to :user
  4. models > users > has_many :products
  5. play dans la console pour verif
  6. update de la vue show pour add l'email du hunter avec un if pour pas planter si pas hunter

13. test
  1. update du seed
  2. rails db:drop
  3. rails db:create db:migrate db:seed

14. creation pdt par user
  1. @product.user = current_user dans products_controller
  2. update validation > product.rb > validates :user, presence: true

15. Images
  1. cloudinary account + gem cloudinary
  2. figaro gem
  3. add cloudinary url dans application.yml
  4. test   <%= cl_image_tag "uvcr6ephisp24lmptn4h", width: 400, height: 100, crop: "fill" %>
  5. voir + dans la doc

16. Upload photo pdt
  1. setup attachinary
  2. models > product > has_attachment :photo
  3. Add input au form
  4. Controler > method find product > add photo to params
  5. update la view show
  6. update bg image avec cloudinary url
  7. update de l'index

17. Uplodad photo avatar
  1. model > product > has_attachment :avatar
  2. update le form devise > views > devise > regist > edit
  3. update application controller avec content du gists
  4. update navbar

18. Deploiement
    1. need envoyer variable env cloudinary >
      1. heroku config:add CLOUDINARY_URL=CONTENT
